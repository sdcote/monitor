/*
 * Copyright (c) 2015 Stephan D. Cote' - All rights reserved.
 * 
 * This program and the accompanying materials are made available under the 
 * terms of the MIT License which accompanies this distribution, and is 
 * available at http://creativecommons.org/licenses/MIT/
 *
 * Contributors:
 *   Stephan D. Cote 
 *      - Initial concept and initial implementation
 */
package coyote.monitor.probe;


import coyote.commons.IDescribable;
import coyote.commons.INamable;
import coyote.loader.cfg.Config;
import coyote.monitor.AbstractCollector;


/**
 * 
 */
public class AbstractProbe extends AbstractCollector implements Probe, INamable, IDescribable {

  /**
   * Tag name of the attribute that contains the value of the error verification
   * config value
   */
  public static final String VERIFY_TAG = "Verify";

  /** Are we verifying errors by re-generating the metric? default = false */
  protected boolean verifingErrors = false;


  /**
   * Return a DataFrame that can be used as a template for defining instances
   * of this class.
   *
   * @return a capsule that can be used as a configuration template
   */
  public Config getTemplate()
  {
    Config template = super.getTemplate();

    try
    {
      //template.addAttributeSlot( new AttributeSlot( VERIFY_TAG, "Flag indicating the facility will be double-checked if an error occurs with the facility.", Attribute.BOOLEAN_TYPE, false, null, new Boolean( false ) ) );
    }
    catch( Exception ex )
    {
      // Should always work
    }

    return template;
  }

  /**
   * Return whether or not this Probe is verifying errors.
   *
   * <p>True indicates this Probe will call <code>generateMetric()</code> a
   * second time if the Metric generated by the first call contained an error.
   * False indicates the call will not be repeated.<p>
   *
   * @return True indicates the Probe is verifying errors, false otherwise.
   */
  public boolean isVerifingErrors()
  {
    return verifingErrors;
  }




  /**
   * Set the flag indication error verification runs should be performed.
   *
   * @param flag True indicates the Probe should verify errors, false indicates
   *        only call the metric generation routine once.
   */
  public void setVerifingErrors( boolean flag )
  {
    this.verifingErrors = flag;
  }



}
