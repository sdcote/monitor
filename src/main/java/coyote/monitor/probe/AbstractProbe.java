/*
 * Copyright (c) 2015 Stephan D. Cote' - All rights reserved.
 * 
 * This program and the accompanying materials are made available under the 
 * terms of the MIT License which accompanies this distribution, and is 
 * available at http://creativecommons.org/licenses/MIT/
 *
 * Contributors:
 *   Stephan D. Cote 
 *      - Initial concept and initial implementation
 */
package coyote.monitor.probe;

import coyote.commons.Describable;
import coyote.commons.Namable;
import coyote.dataframe.DataFrame;
import coyote.loader.cfg.Config;
import coyote.loader.cfg.ConfigSlot;
import coyote.monitor.AbstractCollector;


/**
 * An AbstractProbe is the base class for all probes and handles a majority of 
 * 
 */
public abstract class AbstractProbe extends AbstractCollector implements Probe, Namable, Describable {

  /**
   * Tag name of the attribute that contains the value of the error verification
   * config value
   */
  public static final String VERIFY_TAG = "Verify";

  /** Are we verifying errors by re-generating the metric? default = false */
  protected boolean verifingErrors = false;




  /**
   * Return a DataFrame that can be used as a template for defining instances
   * of this class.
   *
   * @return a configuration that can be used as a template
   */
  public Config getTemplate() {
    // Get the configuration attributes for collectors in general
    Config template = super.getTemplate();

    try {
      template.addConfigSlot( new ConfigSlot( VERIFY_TAG, "Flag indicating the facility will be double-checked if an error occurs with the facility.", new Boolean( false ) ) );
    } catch ( Exception ex ) {
      // Should always work
    }

    return template;
  }




  /**
   * @see coyote.loader.thread.ThreadJob#initialize()
   */
  @Override
  public void initialize() {
    System.out.println( "initialized" );
  }




  /**
   * @see coyote.loader.thread.ThreadJob#doWork()
   */
  @Override
  public void doWork() {
    System.out.println( "working..." );
  }




  /**
   * @see coyote.loader.thread.ThreadJob#terminate()
   */
  @Override
  public void terminate() {
    System.out.println( "terminated" );
  }




  /**
   * Return whether or not this Probe is verifying errors.
   *
   * <p>True indicates this Probe will call <code>generateMetric()</code> a
   * second time if the Metric generated by the first call contained an error.
   * False indicates the call will not be repeated.<p>
   *
   * @return True indicates the Probe is verifying errors, false otherwise.
   */
  public boolean isVerifingErrors() {
    return verifingErrors;
  }




  /**
   * Set the flag indication error verification runs should be performed.
   *
   * @param flag True indicates the Probe should verify errors, false indicates
   *        only call the metric generation routine once.
   */
  public void setVerifingErrors( boolean flag ) {
    this.verifingErrors = flag;
  }




  /**
   * @see coyote.monitor.probe.Probe#generateSample()
   */
  @Override
  public DataFrame generateSample() {
    // TODO Auto-generated method stub
    return null;
  }

}
